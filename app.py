import streamlit as st
import pandas as pd
import json
import os
from datetime import datetime
from dotenv import load_dotenv
import plotly.express as px
import plotly.graph_objects as go
from pathlib import Path

# Import custom modules with error handling
try:
    from utils.ai_analyzer import AIAnalyzer
    AI_AVAILABLE = True
except ImportError as e:
    print(f"Warning: Could not import AI analyzer: {e}")
    AI_AVAILABLE = False

try:
    from utils.pdf_extractor import PDFExtractor
    PDF_AVAILABLE = True
except ImportError as e:
    print(f"Warning: Could not import PDF extractor: {e}")
    PDF_AVAILABLE = False

# Load environment variables
load_dotenv()

# Constants
DATA_DIR = Path("data")
ASSESSMENTS_FILE = DATA_DIR / "assessments.json"

# Page config
st.set_page_config(
    page_title="‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô Slide ‡∏Å‡∏±‡∏ö PLOs (AI-Powered)",
    page_icon="üß†",
    layout="wide",
    initial_sidebar_state="expanded"
)

# PLOs definition with enhanced structure
PLOS = {
    'PLO1': {
        'title': '‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏™‡πà‡∏ß‡∏ô‡∏£‡πà‡∏ß‡∏°',
        'description': '‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏≤‡∏á‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏†‡∏≤‡∏û‡∏†‡∏π‡∏°‡∏¥‡∏≠‡∏≤‡∏Å‡∏≤‡∏® ‡πÇ‡∏î‡∏¢‡∏¢‡∏∂‡∏î‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏™‡πà‡∏ß‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ò‡∏£‡∏£‡∏°‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ó‡∏µ‡πà‡∏¢‡∏±‡πà‡∏á‡∏¢‡∏∑‡∏ô',
        'weight': 35,
        'keywords': ['‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ', 'technology', '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠', 'tools', '‡∏ä‡∏∏‡∏°‡∏ä‡∏ô', 'community', 
                    '‡∏°‡∏µ‡∏™‡πà‡∏ß‡∏ô‡∏£‡πà‡∏ß‡∏°', 'participation', '‡∏¢‡∏±‡πà‡∏á‡∏¢‡∏∑‡∏ô', 'sustainable', 'SDGs'],
        'color': '#FF6B6B'
    },
    'PLO2': {
        'title': '‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ö‡∏π‡∏£‡∏ì‡∏≤‡∏Å‡∏≤‡∏£',
        'description': '‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡∏π‡∏£‡∏ì‡∏≤‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏≠‡∏ö‡∏î‡πâ‡∏≤‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏†‡∏≤‡∏û‡∏†‡∏π‡∏°‡∏¥‡∏≠‡∏≤‡∏Å‡∏≤‡∏®',
        'weight': 35,
        'keywords': ['‡∏ß‡∏¥‡∏à‡∏±‡∏¢', 'research', '‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£', 'methodology', '‡∏ö‡∏π‡∏£‡∏ì‡∏≤‡∏Å‡∏≤‡∏£', 'integrate',
                    '‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå', 'analysis', '‡∏ô‡∏ß‡∏±‡∏ï‡∏Å‡∏£‡∏£‡∏°', 'innovation'],
        'color': '#4ECDC4'
    },
    'PLO3': {
        'title': '‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ñ‡πà‡∏≤‡∏¢‡∏ó‡∏≠‡∏î',
        'description': '‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£ ‡∏ñ‡πà‡∏≤‡∏¢‡∏ó‡∏≠‡∏î ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏à‡∏≤‡∏Å‡∏á‡∏≤‡∏ô‡∏ß‡∏¥‡∏à‡∏±‡∏¢‡∏î‡πâ‡∏≤‡∏ô‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏†‡∏≤‡∏û‡∏†‡∏π‡∏°‡∏¥‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û',
        'weight': 30,
        'keywords': ['‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£', 'communicate', '‡∏ô‡∏≥‡πÄ‡∏™‡∏ô‡∏≠', 'present', '‡∏†‡∏≤‡∏û', 'visual',
                    '‡πÅ‡∏ú‡∏ô‡∏†‡∏π‡∏°‡∏¥', 'chart', '‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢', 'explain', '‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢', 'clear'],
        'color': '#45B7D1'
    }
}

# Enhanced courses structure
COURSES = {
    '‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö': [
        {'code': '282711', 'name': '‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏†‡∏≤‡∏û‡∏†‡∏π‡∏°‡∏¥‡∏≠‡∏≤‡∏Å‡∏≤‡∏®', 'credits': 3},
        {'code': '282712', 'name': '‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ô‡πâ‡∏≥‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏¢‡∏±‡πà‡∏á‡∏¢‡∏∑‡∏ô', 'credits': 3},
        {'code': '282713', 'name': '‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏¥‡πÄ‡∏ß‡∏®‡∏ó‡∏≤‡∏á‡∏ö‡∏Å', 'credits': 3},
        {'code': '282714', 'name': '‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö‡∏ß‡∏¥‡∏ò‡∏µ‡∏ß‡∏¥‡∏à‡∏±‡∏¢‡∏ó‡∏≤‡∏á‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÅ‡∏•‡∏∞‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ', 'credits': 3},
        {'code': '282715', 'name': '‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏†‡∏≤‡∏û‡∏†‡∏π‡∏°‡∏¥‡∏≠‡∏≤‡∏Å‡∏≤‡∏®', 'credits': 3}
    ],
    '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å': [
        {'code': '282721', 'name': '‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ó‡∏≤‡∏á‡∏†‡∏π‡∏°‡∏¥‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÅ‡∏•‡∏∞‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏ó‡∏≤‡∏á‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°', 'credits': 3},
        {'code': '282722', 'name': '‡πÅ‡∏ö‡∏ö‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏≤‡∏á‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡πÅ‡∏•‡∏∞‡∏™‡∏†‡∏≤‡∏û‡∏†‡∏π‡∏°‡∏¥‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏î‡πâ‡∏ß‡∏¢‡∏õ‡∏±‡∏ç‡∏ç‡∏≤‡∏õ‡∏£‡∏∞‡∏î‡∏¥‡∏©‡∏ê‡πå', 'credits': 3},
        {'code': '282723', 'name': '‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏Å‡∏≤‡∏£‡∏•‡∏î‡∏Å‡πä‡∏≤‡∏ã‡πÄ‡∏£‡∏∑‡∏≠‡∏ô‡∏Å‡∏£‡∏∞‡∏à‡∏Å‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß', 'credits': 3},
        {'code': '282724', 'name': '‡∏Ñ‡∏≤‡∏£‡πå‡∏ö‡∏≠‡∏ô‡∏ü‡∏∏‡∏ï‡∏û‡∏£‡∏¥‡∏ô‡∏ï‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏ó‡∏≤‡∏á‡∏Ñ‡∏≤‡∏£‡πå‡∏ö‡∏≠‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏¢‡∏±‡πà‡∏á‡∏¢‡∏∑‡∏ô', 'credits': 3},
        {'code': '282731', 'name': '‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏°‡∏•‡∏û‡∏¥‡∏©‡∏ó‡∏≤‡∏á‡∏≠‡∏≤‡∏Å‡∏≤‡∏®', 'credits': 3},
        {'code': '282732', 'name': '‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏î‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏õ‡πà‡∏≤‡πÑ‡∏°‡πâ‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏£‡∏±‡∏Å‡∏©‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏ä‡∏µ‡∏ß‡∏†‡∏≤‡∏û', 'credits': 3},
        {'code': '282733', 'name': '‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏•‡∏∏‡πà‡∏°‡∏ô‡πâ‡∏≥', 'credits': 3},
        {'code': '282734', 'name': '‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏†‡∏≤‡∏û‡∏†‡∏π‡∏°‡∏¥‡∏≠‡∏≤‡∏Å‡∏≤‡∏®', 'credits': 3}
    ]
}

# Initialize session state
def init_session_state():
    if 'assessments' not in st.session_state:
        st.session_state.assessments = load_assessments()
    if 'current_assessment' not in st.session_state:
        st.session_state.current_assessment = None
    if 'page' not in st.session_state:
        st.session_state.page = "üè† ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å"

# Enhanced file operations
def load_assessments():
    """Load assessments with error handling"""
    try:
        if ASSESSMENTS_FILE.exists():
            with open(ASSESSMENTS_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
    except Exception as e:
        st.error(f"Error loading assessments: {e}")
    return []

def save_assessments(assessments):
    """Save assessments with error handling"""
    try:
        DATA_DIR.mkdir(exist_ok=True)
        with open(ASSESSMENTS_FILE, 'w', encoding='utf-8') as f:
            json.dump(assessments, f, ensure_ascii=False, indent=2)
        return True
    except Exception as e:
        st.error(f"Error saving assessments: {e}")
        return False

# Initialize AI Analyzer with caching
@st.cache_resource
def init_ai_analyzer():
    if AI_AVAILABLE:
        api_key = os.getenv('OPENAI_API_KEY')
        if api_key:
            return AIAnalyzer(
                provider=os.getenv('AI_PROVIDER', 'openai'),
                api_key=api_key
            )
    return None

# Enhanced UI components
def create_score_gauge(score, title="Score"):
    """Create a gauge chart for scores"""
    fig = go.Figure(go.Indicator(
        mode = "gauge+number+delta",
        value = score,
        domain = {'x': [0, 1], 'y': [0, 1]},
        title = {'text': title},
        delta = {'reference': 70},
        gauge = {
            'axis': {'range': [None, 100]},
            'bar': {'color': "darkblue"},
            'steps': [
                {'range': [0, 50], 'color': "lightgray"},
                {'range': [50, 70], 'color': "yellow"},
                {'range': [70, 100], 'color': "green"}
            ],
            'threshold': {
                'line': {'color': "red", 'width': 4},
                'thickness': 0.75,
                'value': 70
            }
        }
    ))
    fig.update_layout(height=300)
    return fig

def create_plo_score_chart(scores):
    """Create horizontal bar chart for PLO scores"""
    plo_names = [f"{plo}\n{PLOS[plo]['title']}" for plo in scores.keys()]
    colors = [PLOS[plo]['color'] for plo in scores.keys()]
    
    fig = go.Figure(data=[
        go.Bar(
            y=plo_names,
            x=list(scores.values()),
            orientation='h',
            marker_color=colors,
            text=[f"{score}%" for score in scores.values()],
            textposition='inside'
        )
    ])
    
    fig.add_vline(x=70, line_dash="dash", line_color="red", 
                  annotation_text="‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏ú‡πà‡∏≤‡∏ô (70%)")
    
    fig.update_layout(
        title="‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ PLO",
        xaxis_title="‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô (%)",
        height=400,
        showlegend=False
    )
    return fig

# Main application
def main():
    init_session_state()
    
    # Custom CSS
    st.markdown("""
    <style>
    .metric-card {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 0.5rem;
        border-left: 4px solid #1f77b4;
    }
    .success-card {
        background-color: #d4edda;
        border-color: #c3e6cb;
        color: #155724;
    }
    .warning-card {
        background-color: #fff3cd;
        border-color: #ffeaa7;
        color: #856404;
    }
    </style>
    """, unsafe_allow_html=True)
    
    # Header
    st.title("üß† ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á Slide ‡∏Å‡∏±‡∏ö PLOs")
    st.caption("‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡∏°‡∏´‡∏≤‡∏ö‡∏±‡∏ì‡∏ë‡∏¥‡∏ï ‡∏™‡∏≤‡∏Ç‡∏≤‡∏ß‡∏¥‡∏ä‡∏≤‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏†‡∏≤‡∏û‡∏†‡∏π‡∏°‡∏¥‡∏≠‡∏≤‡∏Å‡∏≤‡∏®")
    
    # Sidebar
    with st.sidebar:
        st.header("üìã ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å")
        
        # Navigation with session state
        menu_options = ["üè† ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å", "üì§ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î Slide", "üìä ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô", "üìà ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•", "üìã ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥"]
        
        if 'page' in st.session_state:
            try:
                current_index = menu_options.index(st.session_state.page)
            except ValueError:
                current_index = 0
        else:
            current_index = 0
            
        menu = st.radio(
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô",
            menu_options,
            index=current_index
        )
        
        # Update session state if menu changed
        if menu != st.session_state.get('page'):
            st.session_state.page = menu
        
        st.divider()
        
        # Enhanced AI Status
        st.header("ü§ñ AI Status")
        ai_enabled = AI_AVAILABLE and os.getenv('OPENAI_API_KEY') is not None
        if ai_enabled:
            st.success("‚úÖ AI ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
            st.caption(f"Provider: {os.getenv('AI_PROVIDER', 'openai')}")
        else:
            st.warning("‚ö†Ô∏è AI ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
            if not AI_AVAILABLE:
                st.caption("‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á: pip install openai")
            else:
                st.caption("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ API Key ‡πÉ‡∏ô .env")
        
        # Quick stats
        st.divider()
        st.header("üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏î‡πà‡∏ß‡∏ô")
        total_assessments = len(st.session_state.assessments)
        st.metric("‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", total_assessments)
        
        if total_assessments > 0:
            passed = len([a for a in st.session_state.assessments if a.get('overall_score', 0) >= 70])
            st.metric("‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå", f"{passed}/{total_assessments}")
    
    # Main content routing
    if st.session_state.page == "üè† ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å":
        show_home()
    elif st.session_state.page == "üì§ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î Slide":
        show_upload()
    elif st.session_state.page == "üìä ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô":
        show_assessment()
    elif st.session_state.page == "üìà ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•":
        show_summary()
    elif st.session_state.page == "üìã ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥":
        show_history()

def show_home():
    """Enhanced home page with better layout"""
    
    # PLO Overview
    st.header("üéØ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á‡∏Ç‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£ (PLOs)")
    
    # PLO Cards in columns
    cols = st.columns(len(PLOS))
    for idx, (plo_code, plo_data) in enumerate(PLOS.items()):
        with cols[idx]:
            with st.container():
                st.markdown(f"""
                <div style="border: 2px solid {plo_data['color']}; padding: 1rem; border-radius: 0.5rem; height: 300px;">
                    <h3 style="color: {plo_data['color']};">{plo_code}</h3>
                    <h5>{plo_data['title']}</h5>
                    <p style="font-size: 0.9em;">{plo_data['description'][:150]}...</p>
                    <p><strong>‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å:</strong> {plo_data['weight']}%</p>
                </div>
                """, unsafe_allow_html=True)
    
    st.markdown("---")
    
    # Enhanced Statistics
    st.header("üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°")
    
    total_assessments = len(st.session_state.assessments)
    if total_assessments > 0:
        passed = len([a for a in st.session_state.assessments if a.get('overall_score', 0) >= 70])
        avg_score = sum(a.get('overall_score', 0) for a in st.session_state.assessments) / total_assessments
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", total_assessments)
        with col2:
            st.metric("‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå", passed, f"{passed/total_assessments*100:.0f}%")
        with col3:
            st.metric("‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á", total_assessments - passed)
        with col4:
            st.metric("‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢", f"{avg_score:.1f}%")
        
        # Quick visualization
        if total_assessments >= 3:
            st.subheader("üìà ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô")
            df = pd.DataFrame(st.session_state.assessments)
            df['date'] = pd.to_datetime(df['date'])
            df = df.sort_values('date')
            
            fig = px.line(df, x='date', y='overall_score', 
                         title="‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤",
                         labels={'date': '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà', 'overall_score': '‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏° (%)'})
            fig.add_hline(y=70, line_dash="dash", line_color="red")
            st.plotly_chart(fig, use_container_width=True)
    else:
        st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î Slide")
        if st.button("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô", type="primary"):
            st.session_state.page = "üì§ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î Slide"
            st.rerun()

def show_upload():
    """Enhanced upload page with better UX"""
    st.header("üì§ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î Slide ‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô")
    
    # Progress indicator
    progress_steps = ["üìÅ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå", "üîç ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°", "ü§ñ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå AI", "üìä ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô"]
    current_step = 0
    
    if 'current_slide' in st.session_state:
        current_step = 2 if 'ai_analysis' not in st.session_state else 3
    
    # Show progress
    st.subheader("üìã ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô")
    cols = st.columns(len(progress_steps))
    for idx, step in enumerate(progress_steps):
        with cols[idx]:
            if idx <= current_step:
                st.success(step)
            else:
                st.info(step)
    
    st.markdown("---")
    
    # Course selection with enhanced layout
    col1, col2 = st.columns([3, 1])
    with col1:
        course_type = st.selectbox("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ß‡∏¥‡∏ä‡∏≤", ["‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö", "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"])
        
        # Format course options better
        course_options = []
        for course in COURSES[course_type]:
            option = f"{course['code']} - {course['name']} ({course['credits']} ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Å‡∏¥‡∏ï)"
            course_options.append(option)
            
        selected_course = st.selectbox(
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤",
            options=course_options
        )
    
    with col2:
        st.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤", len(COURSES[course_type]))
    
    # Enhanced file upload
    st.subheader("üìÅ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå")
    uploaded_file = st.file_uploader(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå Slide",
        type=['pdf', 'pptx', 'ppt'],
        help="‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå PDF, PPT, PPTX ‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 200MB"
    )
    
    if uploaded_file is not None:
        # File info
        file_size = len(uploaded_file.getvalue()) / (1024 * 1024)  # MB
        st.success(f"‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå: {uploaded_file.name} ({file_size:.1f} MB)")
        
        # Extract text button with better UX
        if st.button("üîç ‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°", type="primary", use_container_width=True):
            with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå... ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà"):
                try:
                    # Simulate processing time for better UX
                    import time
                    time.sleep(1)
                    
                    if uploaded_file.type == "application/pdf" and PDF_AVAILABLE:
                        extractor = PDFExtractor()
                        text = extractor.extract_text(uploaded_file)
                    else:
                        # Enhanced fallback
                        text = generate_mock_content(uploaded_file.name, selected_course)
                    
                    # Save to session
                    st.session_state.current_slide = {
                        'name': uploaded_file.name,
                        'course': selected_course,
                        'course_type': course_type,
                        'content': text,
                        'upload_date': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                        'file_size': file_size
                    }
                    
                    st.success("‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                    
                    # Show content preview with expandable section
                    with st.expander("üëÄ ‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏î‡πâ", expanded=False):
                        st.text_area(
                            "‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á",
                            value=text[:2000] + "..." if len(text) > 2000 else text,
                            height=300,
                            disabled=True
                        )
                        st.caption(f"‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {len(text)} ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£")
                            
                except Exception as e:
                    st.error(f"‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
        
        # Show AI analysis option if slide is ready
        if 'current_slide' in st.session_state:
            st.markdown("---")
            st.success("üìÑ ‡πÑ‡∏ü‡∏•‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
            
            col1, col2 = st.columns(2)
            with col1:
                if st.button("ü§ñ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡πâ‡∏ß‡∏¢ AI", type="secondary", use_container_width=True):
                    analyze_with_ai()
            with col2:
                if st.button("‚úèÔ∏è ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á", use_container_width=True):
                    st.session_state.page = "üìä ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô"
                    st.rerun()

def generate_mock_content(filename, course):
    """Generate more realistic mock content based on filename and course"""
    base_content = f"""
    ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏à‡∏≤‡∏Å {filename}
    ‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤: {course}
    
    ‡∏ö‡∏ó‡∏ó‡∏µ‡πà 1: ‡∏ö‡∏ó‡∏ô‡∏≥
    ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏†‡∏≤‡∏û‡∏†‡∏π‡∏°‡∏¥‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÉ‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô 
    ‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡πÉ‡∏´‡∏°‡πà‡πÜ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
    
    ‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏™‡πà‡∏ß‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏ä‡∏∏‡∏°‡∏ä‡∏ô‡∏ñ‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏∏‡∏ç‡πÅ‡∏à‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ó‡∏µ‡πà‡∏¢‡∏±‡πà‡∏á‡∏¢‡∏∑‡∏ô
    ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ö‡∏π‡∏£‡∏ì‡∏≤‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÑ‡∏î‡πâ‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô
    
    ‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏™‡∏ô‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ü‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢
    ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡πÅ‡∏ú‡∏ô‡∏†‡∏π‡∏°‡∏¥‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£
    
    SDGs (Sustainable Development Goals) ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏Ñ‡∏ß‡∏£‡∏°‡∏∏‡πà‡∏á‡∏™‡∏π‡πà
    ‡∏ô‡∏ß‡∏±‡∏ï‡∏Å‡∏£‡∏£‡∏°‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡∏Ç‡∏±‡∏ö‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤
    """
    
    # Add course-specific content
    if "‡∏ô‡πâ‡∏≥" in course:
        base_content += "\n\n‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ô‡πâ‡∏≥‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏¢‡∏±‡πà‡∏á‡∏¢‡∏∑‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏≤‡∏®‡∏±‡∏¢‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏™‡πà‡∏ß‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏ä‡∏∏‡∏°‡∏ä‡∏ô"
    elif "‡∏ß‡∏¥‡∏à‡∏±‡∏¢" in course:
        base_content += "\n\n‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö‡∏ß‡∏¥‡∏ò‡∏µ‡∏ß‡∏¥‡∏à‡∏±‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÑ‡∏î‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠"
    elif "‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£" in course:
        base_content += "\n\n‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°"
    
    return base_content

def analyze_with_ai():
    """Enhanced AI analysis with better UX and error handling"""
    
    if 'current_slide' not in st.session_state:
        st.warning("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î Slide ‡∏Å‡πà‡∏≠‡∏ô")
        return
    
    # Create columns for better layout
    col1, col2 = st.columns([2, 1])
    
    with col1:
        progress_bar = st.progress(0)
        status_text = st.empty()
    
    with col2:
        st.info("ü§ñ AI ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•...")
    
    try:
        # Simulate AI processing steps
        steps = [
            ("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...", 20),
            ("‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤...", 40), 
            ("‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç...", 60),
            ("‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô...", 80),
            ("‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥...", 100)
        ]
        
        for step_text, progress in steps:
            status_text.text(step_text)
            progress_bar.progress(progress)
            import time
            time.sleep(0.5)  # Simulate processing time
        
        # Get AI analysis
        ai_analyzer = init_ai_analyzer()
        if ai_analyzer and os.getenv('OPENAI_API_KEY'):
            result = ai_analyzer.analyze_slide(
                st.session_state.current_slide['content'],
                PLOS
            )
        else:
            # Enhanced mock analysis
            result = generate_enhanced_mock_analysis()
        
        st.session_state.ai_analysis = result
        
        # Clear progress indicators
        progress_bar.empty()
        status_text.empty()
        col2.empty()
        
        # Show results immediately
        show_ai_results(result)
        
    except Exception as e:
        st.error(f"‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå: {str(e)}")
        # Fallback to mock data
        result = generate_enhanced_mock_analysis()
        st.session_state.ai_analysis = result
        show_ai_results(result)

def generate_enhanced_mock_analysis():
    """Generate more realistic mock analysis"""
    import random
    
    # Generate realistic scores with some randomness
    base_scores = {'PLO1': 75, 'PLO2': 82, 'PLO3': 68}
    scores = {plo: max(50, min(95, score + random.randint(-10, 10))) 
              for plo, score in base_scores.items()}
    
    overall = sum(scores[plo] * PLOS[plo]['weight'] / 100 for plo in scores)
    
    return {
        "PLO1": {
            "score": scores['PLO1'],
            "foundKeywords": ["‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ", "‡∏ä‡∏∏‡∏°‡∏ä‡∏ô", "‡∏¢‡∏±‡πà‡∏á‡∏¢‡∏∑‡∏ô", "SDGs"],
            "strengths": [
                "‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏•‡πà‡∏≤‡∏ß‡∏ñ‡∏∂‡∏á‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô",
                "‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ó‡∏µ‡πà‡∏¢‡∏±‡πà‡∏á‡∏¢‡∏∑‡∏ô",
                "‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö SDGs ‡πÑ‡∏î‡πâ‡∏î‡∏µ"
            ],
            "suggestions": [
                "‡∏Ñ‡∏ß‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏™‡πà‡∏ß‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏ä‡∏∏‡∏°‡∏ä‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡∏ò‡∏£‡∏£‡∏°",
                "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏ì‡∏µ‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏à‡∏≤‡∏Å‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏ó‡πâ‡∏≠‡∏á‡∏ñ‡∏¥‡πà‡∏ô",
                "‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡πÉ‡∏´‡πâ‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏∂‡πâ‡∏ô"
            ]
        },
        "PLO2": {
            "score": scores['PLO2'],
            "foundKeywords": ["‡∏ß‡∏¥‡∏à‡∏±‡∏¢", "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå", "‡∏ö‡∏π‡∏£‡∏ì‡∏≤‡∏Å‡∏≤‡∏£", "‡∏ô‡∏ß‡∏±‡∏ï‡∏Å‡∏£‡∏£‡∏°"],
            "strengths": [
                "‡∏°‡∏µ‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏ö‡∏ö",
                "‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏µ",
                "‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ö‡∏π‡∏£‡∏ì‡∏≤‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏´‡∏•‡πà‡∏á"
            ],
            "suggestions": [
                "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö‡∏ß‡∏¥‡∏ò‡∏µ‡∏ß‡∏¥‡∏à‡∏±‡∏¢‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô",
                "‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏π‡∏£‡∏ì‡∏≤‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≤‡∏°‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå",
                "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏≠‡∏†‡∏¥‡∏õ‡∏£‡∏≤‡∏¢‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢"
            ]
        },
        "PLO3": {
            "score": scores['PLO3'],
            "foundKeywords": ["‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£", "‡∏ô‡∏≥‡πÄ‡∏™‡∏ô‡∏≠", "‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢"],
            "strengths": [
                "‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢",
                "‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î‡πÑ‡∏î‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô"
            ],
            "suggestions": [
                "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡πÅ‡∏ú‡∏ô‡∏†‡∏π‡∏°‡∏¥‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢",
                "‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢",
                "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏™‡πà‡∏ß‡∏ô‡∏£‡πà‡∏ß‡∏°‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏™‡∏ô‡∏≠",
                "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢"
            ]
        },
        "overall_score": overall,
        "general_suggestions": [
            "‡πÄ‡∏û‡∏¥‡πà‡∏° case study ‡∏à‡∏≤‡∏Å‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡πÑ‡∏ó‡∏¢‡πÅ‡∏•‡∏∞‡∏≠‡∏≤‡πÄ‡∏ã‡∏µ‡∏¢‡∏ô",
            "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏™‡πà‡∏ß‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô",
            "‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Å‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô",
            "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢"
        ]
    }

def show_ai_results(result):
    """Display AI analysis results with enhanced visualization"""
    
    st.markdown("---")
    st.subheader("üéØ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏à‡∏≤‡∏Å AI")
    
    # Overall score with enhanced gauge
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        fig = create_score_gauge(result['overall_score'], "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°")
        st.plotly_chart(fig, use_container_width=True)
        
        # Status badge
        if result['overall_score'] >= 80:
            st.success(f"üåü ‡∏î‡∏µ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏° ({result['overall_score']:.1f}%)")
        elif result['overall_score'] >= 70:
            st.success(f"‚úÖ ‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå ({result['overall_score']:.1f}%)")
        else:
            st.warning(f"‚ö†Ô∏è ‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á ({result['overall_score']:.1f}%)")
    
    # PLO scores with enhanced chart
    st.subheader("üìä ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ PLO")
    
    plo_scores = {plo: result[plo]['score'] for plo in ['PLO1', 'PLO2', 'PLO3'] if plo in result}
    fig = create_plo_score_chart(plo_scores)
    st.plotly_chart(fig, use_container_width=True)
    
    # Detailed analysis in tabs
    st.subheader("üìã ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
    
    tab1, tab2, tab3, tab4 = st.tabs(["PLO1", "PLO2", "PLO3", "‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏ß‡∏°"])
    
    for idx, plo in enumerate(['PLO1', 'PLO2', 'PLO3']):
        with [tab1, tab2, tab3][idx]:
            if plo in result:
                col1, col2 = st.columns([1, 1])
                
                with col1:
                    st.markdown(f"**‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: {result[plo]['score']}%**")
                    st.progress(result[plo]['score'] / 100)
                    
                    st.markdown("**üîç ‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏û‡∏ö:**")
                    keywords = result[plo].get('foundKeywords', [])
                    if keywords:
                        for kw in keywords:
                            st.badge(kw, type="secondary")
                    else:
                        st.caption("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç")
                
                with col2:
                    st.markdown("**‚úÖ ‡∏à‡∏∏‡∏î‡πÄ‡∏î‡πà‡∏ô:**")
                    for strength in result[plo].get('strengths', []):
                        st.write(f"‚Ä¢ {strength}")
                
                st.markdown("**üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á:**")
                for suggestion in result[plo].get('suggestions', []):
                    st.info(f"üí° {suggestion}")
    
    with tab4:
        st.markdown("**üìù ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ:**")
        for suggestion in result.get('general_suggestions', []):
            st.info(f"üéØ {suggestion}")
        
        # Summary statistics
        st.markdown("**üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏£‡∏∏‡∏õ:**")
        col1, col2, col3 = st.columns(3)
        with col1:
            avg_plo = sum(plo_scores.values()) / len(plo_scores)
            st.metric("‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô PLO ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢", f"{avg_plo:.1f}%")
        with col2:
            highest_plo = max(plo_scores, key=plo_scores.get)
            st.metric("PLO ‡∏ó‡∏µ‡πà‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î", highest_plo)
        with col3:
            lowest_plo = min(plo_scores, key=plo_scores.get)
            st.metric("PLO ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á", lowest_plo)
    
    # Action buttons
    st.markdown("---")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("‚úèÔ∏è ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô", type="primary", use_container_width=True):
            st.session_state.page = "üìä ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô"
            st.rerun()
    
    with col2:
        if st.button("üîÑ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÉ‡∏´‡∏°‡πà", use_container_width=True):
            if 'ai_analysis' in st.session_state:
                del st.session_state.ai_analysis
            st.rerun()
    
    with col3:
        if st.button("üìä ‡∏î‡∏π‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•", use_container_width=True):
            st.session_state.page = "üìà ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•"
            st.rerun()

def show_assessment():
    """Enhanced assessment page with better UX"""
    st.header("üìä ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á")
    
    if 'current_slide' not in st.session_state:
        st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î Slide ‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô")
        if st.button("üì§ ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î", type="primary"):
            st.session_state.page = "üì§ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î Slide"
            st.rerun()
        return
    
    # Current slide info card
    with st.container():
        st.markdown(f"""
        <div class="metric-card">
            <h4>üìÑ {st.session_state.current_slide['name']}</h4>
            <p><strong>‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤:</strong> {st.session_state.current_slide['course']}</p>
            <p><strong>‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠:</strong> {st.session_state.current_slide['upload_date']}</p>
        </div>
        """, unsafe_allow_html=True)
    
    st.markdown("---")
    
    # Assessment form with enhanced layout
    st.subheader("üìã ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö PLOs")
    
    scores = {}
    comments = {}
    ai_suggestions = st.session_state.get('ai_analysis', {})
    
    # Create tabs for each PLO
    tab1, tab2, tab3 = st.tabs([f"PLO1 ({PLOS['PLO1']['weight']}%)", 
                                f"PLO2 ({PLOS['PLO2']['weight']}%)", 
                                f"PLO3 ({PLOS['PLO3']['weight']}%)"])
    
    tabs = [tab1, tab2, tab3]
    
    for idx, (plo_code, plo_data) in enumerate(PLOS.items()):
        with tabs[idx]:
            # PLO description
            st.markdown(f"### {plo_data['title']}")
            st.write(plo_data['description'])
            
            # Keywords reference
            with st.expander("üîç ‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á"):
                keyword_cols = st.columns(3)
                for i, keyword in enumerate(plo_data['keywords']):
                    with keyword_cols[i % 3]:
                        st.caption(f"‚Ä¢ {keyword}")
            
            # AI suggestion display
            if plo_code in ai_suggestions:
                ai_score = ai_suggestions[plo_code].get('score', 50)
                st.info(f"ü§ñ AI ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: **{ai_score}%**")
                
                # Show AI found keywords
                ai_keywords = ai_suggestions[plo_code].get('foundKeywords', [])
                if ai_keywords:
                    st.success(f"üéØ AI ‡∏û‡∏ö‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: {', '.join(ai_keywords)}")
            
            # Score input with better UX
            col1, col2 = st.columns([2, 1])
            
            with col1:
                default_score = ai_suggestions.get(plo_code, {}).get('score', 70)
                scores[plo_code] = st.slider(
                    f"‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô {plo_code} (0-100)",
                    min_value=0,
                    max_value=100,
                    value=default_score,
                    step=5,
                    help=f"‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Å‡∏±‡∏ö {plo_code}"
                )
            
            with col2:
                # Score indicator
                score_color = "üü¢" if scores[plo_code] >= 80 else "üü°" if scores[plo_code] >= 60 else "üî¥"
                score_text = "‡∏î‡∏µ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°" if scores[plo_code] >= 80 else "‡∏î‡∏µ" if scores[plo_code] >= 70 else "‡∏û‡∏≠‡πÉ‡∏ä‡πâ" if scores[plo_code] >= 60 else "‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á"
                st.markdown(f"### {score_color} {score_text}")
                st.progress(scores[plo_code] / 100)
            
            # Comments section
            comments[plo_code] = st.text_area(
                f"üí¨ ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {plo_code}",
                height=100,
                placeholder=f"‡∏£‡∏∞‡∏ö‡∏∏‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {plo_code}...",
                help="‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÉ‡∏´‡πâ‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö PLO ‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô"
            )
            
            # Show AI suggestions if available
            if plo_code in ai_suggestions:
                with st.expander("üí° ‡∏î‡∏π‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏à‡∏≤‡∏Å AI"):
                    suggestions = ai_suggestions[plo_code].get('suggestions', [])
                    for suggestion in suggestions:
                        st.write(f"‚Ä¢ {suggestion}")
    
    # Calculate and display overall score
    st.markdown("---")
    st.subheader("üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°")
    
    overall_score = sum(scores[plo] * PLOS[plo]['weight'] / 100 for plo in scores)
    
    # Enhanced score display
    col1, col2, col3 = st.columns([1, 2, 1])
    
    with col2:
        # Create gauge chart for overall score
        fig = create_score_gauge(overall_score, "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°")
        st.plotly_chart(fig, use_container_width=True)
        
        # Status message
        if overall_score >= 80:
            st.success(f"üåü **‡∏î‡∏µ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°!** ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏° {overall_score:.1f}%")
        elif overall_score >= 70:
            st.success(f"‚úÖ **‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå** ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏° {overall_score:.1f}%")
        else:
            st.warning(f"‚ö†Ô∏è **‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á** ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏° {overall_score:.1f}%")
    
    # Individual PLO scores summary
    st.subheader("üìã ‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ PLO")
    col1, col2, col3 = st.columns(3)
    
    for idx, (plo_code, score) in enumerate(scores.items()):
        with [col1, col2, col3][idx]:
            weight = PLOS[plo_code]['weight']
            weighted_score = score * weight / 100
            
            st.metric(
                label=f"{plo_code} (‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å {weight}%)",
                value=f"{score}%",
                delta=f"‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ñ‡πà‡∏ß‡∏á‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å: {weighted_score:.1f}"
            )
    
    # Save assessment
    st.markdown("---")
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô", type="primary", use_container_width=True):
            assessment = {
                'id': len(st.session_state.assessments) + 1,
                'slide_name': st.session_state.current_slide['name'],
                'course': st.session_state.current_slide['course'],
                'course_type': st.session_state.current_slide['course_type'],
                'date': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                'scores': scores,
                'comments': comments,
                'overall_score': overall_score,
                'status': '‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå' if overall_score >= 70 else '‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á',
                'ai_analyzed': 'ai_analysis' in st.session_state,
                'file_size': st.session_state.current_slide.get('file_size', 0)
            }
            
            st.session_state.assessments.append(assessment)
            
            if save_assessments(st.session_state.assessments):
                st.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!")
                st.balloons()
                
                # Clear current slide data
                if 'current_slide' in st.session_state:
                    del st.session_state.current_slide
                if 'ai_analysis' in st.session_state:
                    del st.session_state.ai_analysis
                
                # Auto-redirect to summary after 2 seconds
                import time
                time.sleep(2)
                st.session_state.page = "üìà ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•"
                st.rerun()
            else:
                st.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å")
    
    with col2:
        if st.button("üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô", use_container_width=True):
            st.rerun()

def show_summary():
    """Enhanced summary page with better analytics"""
    st.header("üìà ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô")
    
    if not st.session_state.assessments:
        st.warning("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô")
        if st.button("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô", type="primary"):
            st.session_state.page = "üì§ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î Slide"
            st.rerun()
        return
    
    # Convert to DataFrame for analysis
    df = pd.DataFrame(st.session_state.assessments)
    df['date'] = pd.to_datetime(df['date'])
    
    # Enhanced overall statistics
    st.subheader("üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°")
    
    col1, col2, col3, col4, col5 = st.columns(5)
    
    total_assessments = len(df)
    passed = len(df[df['status'] == '‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå'])
    avg_score = df['overall_score'].mean()
    ai_analyzed = len(df[df['ai_analyzed'] == True])
    
    with col1:
        st.metric("‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", total_assessments)
    with col2:
        st.metric("‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå", passed, f"{passed/total_assessments*100:.0f}%")
    with col3:
        st.metric("‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢", f"{avg_score:.1f}%")
    with col4:
        st.metric("‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡πâ‡∏ß‡∏¢ AI", ai_analyzed, f"{ai_analyzed/total_assessments*100:.0f}%")
    with col5:
        latest_score = df.iloc[-1]['overall_score']
        trend = "üìà" if latest_score > avg_score else "üìâ" if latest_score < avg_score else "‚û°Ô∏è"
        st.metric("‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î", f"{latest_score:.1f}%", f"{trend}")
    
    # Score distribution with enhanced visualization
    st.subheader("üìä ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô")
    
    tab1, tab2 = st.tabs(["‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°", "‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö PLO"])
    
    with tab1:
        col1, col2 = st.columns(2)
        
        with col1:
            # Histogram
            fig_hist = px.histogram(
                df, 
                x='overall_score', 
                nbins=15,
                title="‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°",
                labels={'overall_score': '‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏° (%)', 'count': '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô'},
                color_discrete_sequence=['#1f77b4']
            )
            fig_hist.add_vline(x=70, line_dash="dash", line_color="red", 
                              annotation_text="‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏ú‡πà‡∏≤‡∏ô (70%)")
            fig_hist.add_vline(x=avg_score, line_dash="dot", line_color="green",
                              annotation_text=f"‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ ({avg_score:.1f}%)")
            st.plotly_chart(fig_hist, use_container_width=True)
        
        with col2:
            # Box plot
            fig_box = px.box(
                df,
                y='overall_score',
                title="‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°",
                labels={'overall_score': '‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏° (%)'}
            )
            fig_box.add_hline(y=70, line_dash="dash", line_color="red")
            st.plotly_chart(fig_box, use_container_width=True)
    
    with tab2:
        # PLO comparison
        plo_data = []
        for assessment in st.session_state.assessments:
            for plo, score in assessment['scores'].items():
                plo_data.append({
                    'PLO': plo,
                    'Score': score,
                    'Assessment': assessment['id']
                })
        
        if plo_data:
            plo_df = pd.DataFrame(plo_data)
            
            col1, col2 = st.columns(2)
            
            with col1:
                # PLO average scores
                plo_avg = plo_df.groupby('PLO')['Score'].mean().reset_index()
                fig_plo = px.bar(
                    plo_avg,
                    x='PLO',
                    y='Score',
                    title="‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡πÅ‡∏ï‡πà‡∏•‡∏∞ PLO",
                    labels={'Score': '‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ (%)', 'PLO': 'PLO'},
                    color='PLO',
                    color_discrete_map={
                        'PLO1': PLOS['PLO1']['color'],
                        'PLO2': PLOS['PLO2']['color'],
                        'PLO3': PLOS['PLO3']['color']
                    }
                )
                fig_plo.add_hline(y=70, line_dash="dash", line_color="red")
                st.plotly_chart(fig_plo, use_container_width=True)
            
            with col2:
                # PLO score distribution
                fig_violin = px.violin(
                    plo_df,
                    x='PLO',
                    y='Score',
                    title="‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ PLO",
                    labels={'Score': '‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô (%)', 'PLO': 'PLO'}
                )
                fig_violin.add_hline(y=70, line_dash="dash", line_color="red")
                st.plotly_chart(fig_violin, use_container_width=True)
    
    # Time series analysis
    if total_assessments >= 3:
        st.subheader("üìà ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤")
        
        df_sorted = df.sort_values('date')
        
        col1, col2 = st.columns(2)
        
        with col1:
            # Overall score trend
            fig_trend = px.line(
                df_sorted, 
                x='date', 
                y='overall_score',
                title="‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤",
                labels={'date': '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà', 'overall_score': '‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏° (%)'},
                markers=True
            )
            fig_trend.add_hline(y=70, line_dash="dash", line_color="red")
            fig_trend.add_hline(y=avg_score, line_dash="dot", line_color="green")
            st.plotly_chart(fig_trend, use_container_width=True)
        
        with col2:
            # Moving average (if enough data)
            if total_assessments >= 5:
                df_sorted['moving_avg'] = df_sorted['overall_score'].rolling(window=3).mean()
                fig_ma = px.line(
                    df_sorted,
                    x='date',
                    y=['overall_score', 'moving_avg'],
                    title="‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà",
                    labels={'date': '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà', 'value': '‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô (%)'}
                )
                st.plotly_chart(fig_ma, use_container_width=True)
            else:
                # Pass/Fail ratio over time
                df_sorted['cumulative_pass_rate'] = (df_sorted['status'] == '‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå').cumsum() / range(1, len(df_sorted) + 1) * 100
                fig_pass = px.line(
                    df_sorted,
                    x='date',
                    y='cumulative_pass_rate',
                    title="‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏™‡∏∞‡∏™‡∏°",
                    labels={'date': '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà', 'cumulative_pass_rate': '‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏ú‡πà‡∏≤‡∏ô (%)'}
                )
                fig_pass.add_hline(y=70, line_dash="dash", line_color="red")
                st.plotly_chart(fig_pass, use_container_width=True)
    
    # Course analysis
    st.subheader("üìö ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡∏≤‡∏°‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤")
    
    if 'course' in df.columns:
        course_summary = df.groupby('course').agg({
            'overall_score': ['mean', 'count', 'std'],
            'status': lambda x: (x == '‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå').sum(),
            'ai_analyzed': lambda x: x.sum()
        }).round(2)
        
        course_summary.columns = ['‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô', '‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏ö‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏ö‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô', '‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå', '‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡πâ‡∏ß‡∏¢ AI']
        course_summary['‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏ú‡πà‡∏≤‡∏ô (%)'] = (course_summary['‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå'] / course_summary['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô'] * 100).round(1)
        
        # Style the dataframe
        st.dataframe(
            course_summary,
            use_container_width=True,
            column_config={
                "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢": st.column_config.ProgressColumn(
                    "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢",
                    help="‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤",
                    format="%.1f",
                    min_value=0,
                    max_value=100,
                ),
                "‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏ú‡πà‡∏≤‡∏ô (%)": st.column_config.ProgressColumn(
                    "‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏ú‡πà‡∏≤‡∏ô (%)",
                    help="‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏Å‡∏≤‡∏£‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå",
                    format="%.1f%%",
                    min_value=0,
                    max_value=100,
                ),
            }
        )
        
        # Course performance chart
        if len(course_summary) > 1:
            fig_course = px.scatter(
                course_summary.reset_index(),
                x='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô',
                y='‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢',
                size='‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏ú‡πà‡∏≤‡∏ô (%)',
                title="‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢",
                labels={'‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô': '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô', '‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢': '‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ (%)'},
                hover_data=['course']
            )
            fig_course.add_hline(y=70, line_dash="dash", line_color="red")
            st.plotly_chart(fig_course, use_container_width=True)
    
    # Export functionality
    st.subheader("üì• ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üìä Export ‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏õ‡πá‡∏ô CSV", use_container_width=True):
            csv = df.to_csv(index=False, encoding='utf-8-sig')
            st.download_button(
                label="üì• Download Summary CSV",
                data=csv,
                file_name=f"plo_assessment_summary_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                mime="text/csv",
                use_container_width=True
            )
    
    with col2:
        if st.button("üìà Export ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏õ‡πá‡∏ô JSON", use_container_width=True):
            stats = {
                'total_assessments': total_assessments,
                'passed': int(passed),
                'pass_rate': passed/total_assessments*100,
                'average_score': avg_score,
                'ai_analyzed': int(ai_analyzed),
                'generated_date': datetime.now().isoformat()
            }
            
            st.download_button(
                label="üì• Download Stats JSON",
                data=json.dumps(stats, indent=2, ensure_ascii=False),
                file_name=f"plo_stats_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
                mime="application/json",
                use_container_width=True
            )
    
    with col3:
        if st.button("üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", use_container_width=True):
            st.session_state.assessments = load_assessments()
            st.rerun()

def show_history():
    """Enhanced history page with advanced filtering and search"""
    st.header("üìã ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô")
    
    if not st.session_state.assessments:
        st.warning("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô")
        if st.button("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô", type="primary"):
            st.session_state.page = "üì§ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î Slide"
            st.rerun()
        return
    
    # Convert to DataFrame
    df = pd.DataFrame(st.session_state.assessments)
    df['date'] = pd.to_datetime(df['date'])
    
    # Enhanced filtering section
    st.subheader("üîç ‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        # Course filter
        all_courses = ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] + sorted(df['course'].unique().tolist())
        filter_course = st.selectbox("‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤", all_courses)
    
    with col2:
        # Status filter
        filter_status = st.selectbox(
            "‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞",
            ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå", "‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á"]
        )
    
    with col3:
        # AI analysis filter
        filter_ai = st.selectbox(
            "‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏° AI",
            ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡πâ‡∏ß‡∏¢ AI", "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ AI"]
        )
    
    with col4:
        # Score range filter
        score_range = st.slider(
            "‡∏ä‡πà‡∏ß‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô",
            min_value=0,
            max_value=100,
            value=(0, 100),
            step=5
        )
    
    # Search functionality
    col1, col2 = st.columns([3, 1])
    with col1:
        search_term = st.text_input(
            "üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤",
            placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤..."
        )
    with col2:
        sort_by = st.selectbox(
            "‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°",
            ["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏õ‡πÄ‡∏Å‡πà‡∏≤)", "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (‡πÄ‡∏Å‡πà‡∏≤‡πÑ‡∏õ‡πÉ‡∏´‡∏°‡πà)", "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô (‡∏™‡∏π‡∏á‡πÑ‡∏õ‡∏ï‡πà‡∏≥)", "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô (‡∏ï‡πà‡∏≥‡πÑ‡∏õ‡∏™‡∏π‡∏á)"]
        )
    
    # Apply filters
    filtered_df = df.copy()
    
    if filter_course != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
        filtered_df = filtered_df[filtered_df['course'] == filter_course]
    
    if filter_status != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
        filtered_df = filtered_df[filtered_df['status'] == filter_status]
    
    if filter_ai == "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡πâ‡∏ß‡∏¢ AI":
        filtered_df = filtered_df[filtered_df['ai_analyzed'] == True]
    elif filter_ai == "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ AI":
        filtered_df = filtered_df[filtered_df['ai_analyzed'] == False]
    
    # Score range filter
    filtered_df = filtered_df[
        (filtered_df['overall_score'] >= score_range[0]) & 
        (filtered_df['overall_score'] <= score_range[1])
    ]
    
    # Search filter
    if search_term:
        mask = (
            filtered_df['slide_name'].str.contains(search_term, case=False, na=False) |
            filtered_df['course'].str.contains(search_term, case=False, na=False)
        )
        filtered_df = filtered_df[mask]
    
    # Apply sorting
    if sort_by == "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏õ‡πÄ‡∏Å‡πà‡∏≤)":
        filtered_df = filtered_df.sort_values('date', ascending=False)
    elif sort_by == "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (‡πÄ‡∏Å‡πà‡∏≤‡πÑ‡∏õ‡πÉ‡∏´‡∏°‡πà)":
        filtered_df = filtered_df.sort_values('date', ascending=True)
    elif sort_by == "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô (‡∏™‡∏π‡∏á‡πÑ‡∏õ‡∏ï‡πà‡∏≥)":
        filtered_df = filtered_df.sort_values('overall_score', ascending=False)
    elif sort_by == "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô (‡∏ï‡πà‡∏≥‡πÑ‡∏õ‡∏™‡∏π‡∏á)":
        filtered_df = filtered_df.sort_values('overall_score', ascending=True)
    
    # Show filtered results count
    st.info(f"üìä ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• {len(filtered_df)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(df)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    
    # Display results
    if len(filtered_df) > 0:
        # Prepare display DataFrame
        display_df = filtered_df[[
            'date', 'slide_name', 'course', 'overall_score', 'status', 'ai_analyzed'
        ]].copy()
        
        display_df.columns = ['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà', '‡∏ä‡∏∑‡πà‡∏≠ Slide', '‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤', '‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏° (%)', '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞', 'AI']
        display_df['AI'] = display_df['AI'].map({True: '‚úÖ', False: '‚ùå'})
        display_df['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà'] = display_df['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà'].dt.strftime('%Y-%m-%d %H:%M')
        
        # Enhanced dataframe display
        st.dataframe(
            display_df,
            use_container_width=True,
            hide_index=True,
            column_config={
                "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏° (%)": st.column_config.ProgressColumn(
                    "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏° (%)",
                    help="‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô",
                    format="%.1f%%",
                    min_value=0,
                    max_value=100,
                ),
                "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞": st.column_config.TextColumn(
                    "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞",
                    help="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå"
                ),
                "AI": st.column_config.TextColumn(
                    "AI",
                    help="‡πÉ‡∏ä‡πâ AI ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"
                )
            }
        )
        
        # Detailed view expander
        with st.expander("üëÅÔ∏è ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°"):
            selected_id = st.selectbox(
                "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î",
                options=filtered_df['id'].tolist(),
                format_func=lambda x: f"#{x} - {filtered_df[filtered_df['id']==x]['slide_name'].iloc[0]}"
            )
            
            if selected_id:
                selected_assessment = filtered_df[filtered_df['id'] == selected_id].iloc[0]
                
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown("**üìä ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ PLO:**")
                    for plo, score in selected_assessment['scores'].items():
                        st.metric(plo, f"{score}%")
                
                with col2:
                    st.markdown("**üí¨ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô:**")
                    for plo, comment in selected_assessment['comments'].items():
                        if comment:
                            st.write(f"**{plo}:** {comment}")
                        else:
                            st.caption(f"{plo}: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô")
        
        # Export filtered results
        st.markdown("---")
        col1, col2, col3 = st.columns(3)
        
        with col1:
            if st.button("üì• Export ‡∏ú‡∏•‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô CSV", use_container_width=True):
                csv = display_df.to_csv(index=False, encoding='utf-8-sig')
                timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
                st.download_button(
                    label="üì• Download Filtered CSV",
                    data=csv,
                    file_name=f"filtered_assessments_{timestamp}.csv",
                    mime="text/csv",
                    use_container_width=True
                )
        
        with col2:
            if st.button("üóëÔ∏è ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å", use_container_width=True):
                st.warning("‚ö†Ô∏è ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤")
        
        with col3:
            if st.button("üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á", use_container_width=True):
                st.rerun()
    
    else:
        st.info("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")
        if st.button("üîÑ ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á"):
            st.rerun()

if __name__ == "__main__":
    main()
