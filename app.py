import streamlit as st
import pandas as pd
import json
import os
from datetime import datetime
from dotenv import load_dotenv
import plotly.express as px
import plotly.graph_objects as go

# Import custom modules with error handling
try:
    from utils.ai_analyzer import AIAnalyzer
    AI_AVAILABLE = True
except ImportError as e:
    print(f"Warning: Could not import AI analyzer: {e}")
    AI_AVAILABLE = False

try:
    from utils.pdf_extractor import PDFExtractor
    PDF_AVAILABLE = True
except ImportError as e:
    print(f"Warning: Could not import PDF extractor: {e}")
    PDF_AVAILABLE = False

# Load environment variables
load_dotenv()

# Page config
st.set_page_config(
    page_title="‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô Slide ‡∏Å‡∏±‡∏ö PLOs (AI-Powered)",
    page_icon="üß†",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Initialize session state
if 'assessments' not in st.session_state:
    st.session_state.assessments = []
if 'current_assessment' not in st.session_state:
    st.session_state.current_assessment = None

# Load saved assessments
def load_assessments():
    if os.path.exists('data/assessments.json'):
        with open('data/assessments.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    return []

def save_assessments(assessments):
    os.makedirs('data', exist_ok=True)
    with open('data/assessments.json', 'w', encoding='utf-8') as f:
        json.dump(assessments, f, ensure_ascii=False, indent=2)

# PLOs definition
PLOS = {
    'PLO1': {
        'description': '‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏≤‡∏á‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏†‡∏≤‡∏û‡∏†‡∏π‡∏°‡∏¥‡∏≠‡∏≤‡∏Å‡∏≤‡∏® ‡πÇ‡∏î‡∏¢‡∏¢‡∏∂‡∏î‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏™‡πà‡∏ß‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ò‡∏£‡∏£‡∏°‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ó‡∏µ‡πà‡∏¢‡∏±‡πà‡∏á‡∏¢‡∏∑‡∏ô',
        'weight': 35,
        'keywords': ['‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ', 'technology', '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠', 'tools', '‡∏ä‡∏∏‡∏°‡∏ä‡∏ô', 'community', 
                    '‡∏°‡∏µ‡∏™‡πà‡∏ß‡∏ô‡∏£‡πà‡∏ß‡∏°', 'participation', '‡∏¢‡∏±‡πà‡∏á‡∏¢‡∏∑‡∏ô', 'sustainable', 'SDGs']
    },
    'PLO2': {
        'description': '‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡∏π‡∏£‡∏ì‡∏≤‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏≠‡∏ö‡∏î‡πâ‡∏≤‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏†‡∏≤‡∏û‡∏†‡∏π‡∏°‡∏¥‡∏≠‡∏≤‡∏Å‡∏≤‡∏®',
        'weight': 35,
        'keywords': ['‡∏ß‡∏¥‡∏à‡∏±‡∏¢', 'research', '‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£', 'methodology', '‡∏ö‡∏π‡∏£‡∏ì‡∏≤‡∏Å‡∏≤‡∏£', 'integrate',
                    '‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå', 'analysis', '‡∏ô‡∏ß‡∏±‡∏ï‡∏Å‡∏£‡∏£‡∏°', 'innovation']
    },
    'PLO3': {
        'description': '‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£ ‡∏ñ‡πà‡∏≤‡∏¢‡∏ó‡∏≠‡∏î ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏à‡∏≤‡∏Å‡∏á‡∏≤‡∏ô‡∏ß‡∏¥‡∏à‡∏±‡∏¢‡∏î‡πâ‡∏≤‡∏ô‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏†‡∏≤‡∏û‡∏†‡∏π‡∏°‡∏¥‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û',
        'weight': 30,
        'keywords': ['‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£', 'communicate', '‡∏ô‡∏≥‡πÄ‡∏™‡∏ô‡∏≠', 'present', '‡∏†‡∏≤‡∏û', 'visual',
                    '‡πÅ‡∏ú‡∏ô‡∏†‡∏π‡∏°‡∏¥', 'chart', '‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢', 'explain', '‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢', 'clear']
    }
}

# Courses
COURSES = {
    '‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö': [
        {'code': '282711', 'name': '‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏†‡∏≤‡∏û‡∏†‡∏π‡∏°‡∏¥‡∏≠‡∏≤‡∏Å‡∏≤‡∏®'},
        {'code': '282712', 'name': '‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ô‡πâ‡∏≥‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏¢‡∏±‡πà‡∏á‡∏¢‡∏∑‡∏ô'},
        {'code': '282713', 'name': '‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏¥‡πÄ‡∏ß‡∏®‡∏ó‡∏≤‡∏á‡∏ö‡∏Å'},
        {'code': '282714', 'name': '‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö‡∏ß‡∏¥‡∏ò‡∏µ‡∏ß‡∏¥‡∏à‡∏±‡∏¢‡∏ó‡∏≤‡∏á‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÅ‡∏•‡∏∞‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ'},
        {'code': '282715', 'name': '‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏†‡∏≤‡∏û‡∏†‡∏π‡∏°‡∏¥‡∏≠‡∏≤‡∏Å‡∏≤‡∏®'}
    ],
    '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å': [
        {'code': '282721', 'name': '‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ó‡∏≤‡∏á‡∏†‡∏π‡∏°‡∏¥‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÅ‡∏•‡∏∞‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏ó‡∏≤‡∏á‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°'},
        {'code': '282722', 'name': '‡πÅ‡∏ö‡∏ö‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏≤‡∏á‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡πÅ‡∏•‡∏∞‡∏™‡∏†‡∏≤‡∏û‡∏†‡∏π‡∏°‡∏¥‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏î‡πâ‡∏ß‡∏¢‡∏õ‡∏±‡∏ç‡∏ç‡∏≤‡∏õ‡∏£‡∏∞‡∏î‡∏¥‡∏©‡∏ê‡πå'},
        {'code': '282723', 'name': '‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏Å‡∏≤‡∏£‡∏•‡∏î‡∏Å‡πä‡∏≤‡∏ã‡πÄ‡∏£‡∏∑‡∏≠‡∏ô‡∏Å‡∏£‡∏∞‡∏à‡∏Å‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß'},
        {'code': '282724', 'name': '‡∏Ñ‡∏≤‡∏£‡πå‡∏ö‡∏≠‡∏ô‡∏ü‡∏∏‡∏ï‡∏û‡∏£‡∏¥‡∏ô‡∏ï‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏ó‡∏≤‡∏á‡∏Ñ‡∏≤‡∏£‡πå‡∏ö‡∏≠‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏¢‡∏±‡πà‡∏á‡∏¢‡∏∑‡∏ô'},
        {'code': '282731', 'name': '‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏°‡∏•‡∏û‡∏¥‡∏©‡∏ó‡∏≤‡∏á‡∏≠‡∏≤‡∏Å‡∏≤‡∏®'},
        {'code': '282732', 'name': '‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏î‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏õ‡πà‡∏≤‡πÑ‡∏°‡πâ‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏£‡∏±‡∏Å‡∏©‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏ä‡∏µ‡∏ß‡∏†‡∏≤‡∏û'},
        {'code': '282733', 'name': '‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏•‡∏∏‡πà‡∏°‡∏ô‡πâ‡∏≥'},
        {'code': '282734', 'name': '‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏†‡∏≤‡∏û‡∏†‡∏π‡∏°‡∏¥‡∏≠‡∏≤‡∏Å‡∏≤‡∏®'}
    ]
}

# Initialize AI Analyzer
@st.cache_resource
def init_ai_analyzer():
    if AI_AVAILABLE:
        return AIAnalyzer(
            provider=os.getenv('AI_PROVIDER', 'openai'),
            api_key=os.getenv('OPENAI_API_KEY')
        )
    return None

# Main App
def main():
    # Debug mode
    if st.checkbox("üêõ Debug Mode", value=False):
        st.write("Session State:", st.session_state)
    
    st.title("üß† ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á Slide ‡∏Å‡∏±‡∏ö PLOs")
    st.caption("‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡∏°‡∏´‡∏≤‡∏ö‡∏±‡∏ì‡∏ë‡∏¥‡∏ï ‡∏™‡∏≤‡∏Ç‡∏≤‡∏ß‡∏¥‡∏ä‡∏≤‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏†‡∏≤‡∏û‡∏†‡∏π‡∏°‡∏¥‡∏≠‡∏≤‡∏Å‡∏≤‡∏®")
    
    # Sidebar
    with st.sidebar:
        st.header("üìã ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å")
        menu = st.radio(
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô",
            ["üè† ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å", "üì§ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î Slide", "üìä ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô", "üìà ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•", "üìã ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥"]
        )
        
        st.divider()
        
        # AI Status
        st.header("ü§ñ AI Status")
        ai_enabled = AI_AVAILABLE and os.getenv('OPENAI_API_KEY') is not None
        if ai_enabled:
            st.success("‚úÖ AI ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
            st.caption(f"Provider: {os.getenv('AI_PROVIDER', 'openai')}")
        else:
            st.warning("‚ö†Ô∏è AI ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
            if not AI_AVAILABLE:
                st.caption("‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á: pip install openai")
            else:
                st.caption("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ API Key ‡πÉ‡∏ô .env")
    
    # Load assessments
    st.session_state.assessments = load_assessments()
    
    # Main content based on menu
    if menu == "üè† ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å":
        show_home()
    elif menu == "üì§ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î Slide":
        show_upload()
    elif menu == "üìä ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô":
        show_assessment()
    elif menu == "üìà ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•":
        show_summary()
    elif menu == "üìã ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥":
        show_history()

def show_home():
    st.header("üéØ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á‡∏Ç‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£ (PLOs)")
    
    # Display PLOs
    for plo_code, plo_data in PLOS.items():
        with st.expander(f"{plo_code} (‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å {plo_data['weight']}%)", expanded=True):
            st.write(plo_data['description'])
            st.caption(f"‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: {', '.join(plo_data['keywords'][:5])}...")
    
    # Statistics
    st.header("üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°")
    col1, col2, col3, col4 = st.columns(4)
    
    total_assessments = len(st.session_state.assessments)
    passed = len([a for a in st.session_state.assessments if a.get('overall_score', 0) >= 70])
    
    with col1:
        st.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", total_assessments)
    with col2:
        st.metric("‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå", passed, f"{passed/total_assessments*100:.0f}%" if total_assessments > 0 else "0%")
    with col3:
        st.metric("‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á", total_assessments - passed)
    with col4:
        avg_score = sum(a.get('overall_score', 0) for a in st.session_state.assessments) / total_assessments if total_assessments > 0 else 0
        st.metric("‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢", f"{avg_score:.1f}%")

def show_upload():
    st.header("üì§ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î Slide ‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô")
    
    # Course selection
    col1, col2 = st.columns([2, 1])
    with col1:
        course_type = st.selectbox("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ß‡∏¥‡∏ä‡∏≤", ["‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö", "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"])
        selected_course = st.selectbox(
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤",
            options=[f"{c['code']} - {c['name']}" for c in COURSES[course_type]],
            format_func=lambda x: x
        )
    
    # File upload
    uploaded_file = st.file_uploader(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå Slide",
        type=['pdf', 'pptx', 'ppt'],
        help="‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå PDF, PPT, PPTX"
    )
    
    if uploaded_file is not None:
        st.success(f"‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå: {uploaded_file.name}")
        
        # Extract text button
        if st.button("üîç ‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°", type="primary"):
            with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå..."):
                try:
                    if uploaded_file.type == "application/pdf" and PDF_AVAILABLE:
                        extractor = PDFExtractor()
                        text = extractor.extract_text(uploaded_file)
                    else:
                        # Fallback for demo
                        text = f"[‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏à‡∏≤‡∏Å {uploaded_file.name}]\n\n" + \
                               "‡∏ö‡∏ó‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏Å‡∏•‡πà‡∏≤‡∏ß‡∏ñ‡∏∂‡∏á‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏†‡∏≤‡∏û‡∏†‡∏π‡∏°‡∏¥‡∏≠‡∏≤‡∏Å‡∏≤‡∏® " + \
                               "‡πÇ‡∏î‡∏¢‡πÄ‡∏ô‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏™‡πà‡∏ß‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏ä‡∏∏‡∏°‡∏ä‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ó‡∏µ‡πà‡∏¢‡∏±‡πà‡∏á‡∏¢‡∏∑‡∏ô ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢ " + \
                               "‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤"
                    
                    # Save to session
                    st.session_state.current_slide = {
                        'name': uploaded_file.name,
                        'course': selected_course,
                        'course_type': course_type,
                        'content': text,
                        'upload_date': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                    }
                    
                    st.success("‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                    
                    # Show preview
                    with st.expander("‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤"):
                        st.text(text[:1000] + "..." if len(text) > 1000 else text)
                            
                except Exception as e:
                    st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• slide ‡πÉ‡∏ô session ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if 'current_slide' in st.session_state:
            st.info("üìÑ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡πâ‡∏ß")
            
            # AI Analysis button - ‡πÉ‡∏ä‡πâ unique key
            if st.button("ü§ñ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡πâ‡∏ß‡∏¢ AI", type="secondary", key="analyze_ai_btn"):
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á placeholder ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
                result_placeholder = st.empty()
                with result_placeholder.container():
                    analyze_with_ai()


def analyze_with_ai():
    """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡πâ‡∏ß‡∏¢ AI ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ó‡∏±‡∏ô‡∏ó‡∏µ"""
    
    if 'current_slide' not in st.session_state:
        st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î Slide ‡∏Å‡πà‡∏≠‡∏ô")
        return
    
    # ‡πÅ‡∏™‡∏î‡∏á spinner
    with st.spinner("üß† AI ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå..."):
        try:
            # ‡πÉ‡∏ä‡πâ Mock data ‡πÄ‡∏™‡∏°‡∏≠‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ AI
            ai_analyzer = init_ai_analyzer()
            if ai_analyzer:
                result = ai_analyzer.analyze_slide(
                    st.session_state.current_slide['content'],
                    PLOS
                )
            else:
                # Mock analysis
                result = {
                    "PLO1": {
                        "score": 75,
                        "foundKeywords": ["‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ", "‡∏ä‡∏∏‡∏°‡∏ä‡∏ô", "‡∏¢‡∏±‡πà‡∏á‡∏¢‡∏∑‡∏ô"],
                        "strengths": [
                            "‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏•‡πà‡∏≤‡∏ß‡∏ñ‡∏∂‡∏á‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á",
                            "‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ó‡∏µ‡πà‡∏¢‡∏±‡πà‡∏á‡∏¢‡∏∑‡∏ô"
                        ],
                        "suggestions": [
                            "‡∏Ñ‡∏ß‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏™‡πà‡∏ß‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏ä‡∏∏‡∏°‡∏ä‡∏ô",
                            "‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö SDGs ‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô"
                        ]
                    },
                    "PLO2": {
                        "score": 82,
                        "foundKeywords": ["‡∏ß‡∏¥‡∏à‡∏±‡∏¢", "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå", "‡∏ö‡∏π‡∏£‡∏ì‡∏≤‡∏Å‡∏≤‡∏£"],
                        "strengths": [
                            "‡∏°‡∏µ‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô",
                            "‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏µ"
                        ],
                        "suggestions": [
                            "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ö‡∏π‡∏£‡∏ì‡∏≤‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≤‡∏°‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå",
                            "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö‡∏ß‡∏¥‡∏ò‡∏µ‡∏ß‡∏¥‡∏à‡∏±‡∏¢"
                        ]
                    },
                    "PLO3": {
                        "score": 68,
                        "foundKeywords": ["‡∏ô‡∏≥‡πÄ‡∏™‡∏ô‡∏≠", "‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢"],
                        "strengths": [
                            "‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"
                        ],
                        "suggestions": [
                            "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡πÅ‡∏ú‡∏ô‡∏†‡∏π‡∏°‡∏¥‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö",
                            "‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô"
                        ]
                    },
                    "overall_score": 75,
                    "general_suggestions": [
                        "‡πÄ‡∏û‡∏¥‡πà‡∏° case study ‡∏à‡∏≤‡∏Å‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏ó‡πâ‡∏≠‡∏á‡∏ñ‡∏¥‡πà‡∏ô",
                        "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏™‡πà‡∏ß‡∏ô‡∏£‡πà‡∏ß‡∏°"
                    ]
                }
            
            st.session_state.ai_analysis = result
            
        except Exception as e:
            st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå: {str(e)}")
            # ‡πÉ‡∏ä‡πâ Mock data ‡∏ñ‡πâ‡∏≤ error
            result = {
                "PLO1": {"score": 70, "foundKeywords": ["‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ"], "strengths": ["N/A"], "suggestions": ["N/A"]},
                "PLO2": {"score": 70, "foundKeywords": ["‡∏ß‡∏¥‡∏à‡∏±‡∏¢"], "strengths": ["N/A"], "suggestions": ["N/A"]},
                "PLO3": {"score": 70, "foundKeywords": ["‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£"], "strengths": ["N/A"], "suggestions": ["N/A"]},
                "overall_score": 70,
                "general_suggestions": ["‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏î‡πâ - ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á"]
            }
            st.session_state.ai_analysis = result
            
    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
    st.success("‚úÖ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• AI Results ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
    st.markdown("---")
    st.subheader("üìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏à‡∏≤‡∏Å AI")
    
    # Overall score with gauge
    col1, col2, col3 = st.columns([1,2,1])
    with col2:
        # ‡πÉ‡∏ä‡πâ metric ‡πÅ‡∏ó‡∏ô gauge chart
        st.metric(
            label="‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°",
            value=f"{result['overall_score']}%",
            delta="‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå" if result['overall_score'] >= 70 else "‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á"
        )
    
    # PLO scores in columns
    st.subheader("‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ PLO")
    cols = st.columns(3)
    
    for idx, plo in enumerate(['PLO1', 'PLO2', 'PLO3']):
        with cols[idx]:
            if plo in result:
                score = result[plo]['score']
                st.metric(
                    label=plo,
                    value=f"{score}%",
                    delta="‡∏î‡∏µ‡∏°‡∏≤‡∏Å" if score >= 80 else "‡∏û‡∏≠‡πÉ‡∏ä‡πâ" if score >= 60 else "‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á"
                )
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏û‡∏ö
                if result[plo].get('foundKeywords'):
                    st.caption("‡∏û‡∏ö‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:")
                    for kw in result[plo]['foundKeywords']:
                        st.caption(f"‚Ä¢ {kw}")
    
    # Detailed suggestions
    st.markdown("---")
    st.subheader("üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÇ‡∏î‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î")
    
    for plo in ['PLO1', 'PLO2', 'PLO3']:
        if plo in result:
            with st.expander(f"üìå {plo} - ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥", expanded=False):
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown("**‚úÖ ‡∏à‡∏∏‡∏î‡πÄ‡∏î‡πà‡∏ô:**")
                    for strength in result[plo].get('strengths', []):
                        st.write(f"‚Ä¢ {strength}")
                
                with col2:
                    st.markdown("**üí° ‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á:**")
                    for suggestion in result[plo].get('suggestions', []):
                        st.write(f"‚Ä¢ {suggestion}")
    
    # General suggestions
    if result.get('general_suggestions'):
        st.markdown("---")
        st.subheader("üìù ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ")
        for suggestion in result['general_suggestions']:
            st.info(f"üí° {suggestion}")
    
    # ‡∏õ‡∏∏‡πà‡∏°‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô
    st.markdown("---")
    if st.button("‚úèÔ∏è ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô", type="primary", use_container_width=True):
        st.session_state.page = "üìä ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô"
        st.rerun()

def show_assessment():
    st.header("üìä ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á")
    
    if 'current_slide' not in st.session_state:
        st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î Slide ‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô")
        if st.button("‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î"):
            st.rerun()
        return
    
    # Show current slide info
    st.info(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô: {st.session_state.current_slide['name']}")
    st.caption(f"‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤: {st.session_state.current_slide['course']}")
    
    # Assessment form
    st.subheader("‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö PLOs")
    
    scores = {}
    comments = {}
    
    # Get AI suggestions if available
    ai_suggestions = st.session_state.get('ai_analysis', {})
    
    for plo_code, plo_data in PLOS.items():
        st.divider()
        col1, col2 = st.columns([3, 1])
        
        with col1:
            st.markdown(f"**{plo_code}** (‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å {plo_data['weight']}%)")
            st.caption(plo_data['description'])
            
            # Show AI suggestion if available
            if plo_code in ai_suggestions:
                ai_score = ai_suggestions[plo_code].get('score', 50)
                st.info(f"ü§ñ AI ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: {ai_score}%")
        
        with col2:
            # Score slider
            scores[plo_code] = st.slider(
                f"‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô {plo_code}",
                0, 100, 
                value=ai_suggestions.get(plo_code, {}).get('score', 50),
                step=5,
                label_visibility="collapsed"
            )
        
        # Comments
        comments[plo_code] = st.text_area(
            f"‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏/‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {plo_code}",
            height=100,
            placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞..."
        )
    
    # Calculate overall score
    overall_score = sum(
        scores[plo] * PLOS[plo]['weight'] / 100 
        for plo in scores
    )
    
    # Display overall score
    st.divider()
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        st.metric(
            "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°",
            f"{overall_score:.1f}%",
            f"{'‚úÖ ‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå' if overall_score >= 70 else '‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á'}"
        )
    
    # Save button
    if st.button("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô", type="primary", use_container_width=True):
        assessment = {
            'id': len(st.session_state.assessments) + 1,
            'slide_name': st.session_state.current_slide['name'],
            'course': st.session_state.current_slide['course'],
            'course_type': st.session_state.current_slide['course_type'],
            'date': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            'scores': scores,
            'comments': comments,
            'overall_score': overall_score,
            'status': '‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå' if overall_score >= 70 else '‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á',
            'ai_analyzed': 'ai_analysis' in st.session_state
        }
        
        st.session_state.assessments.append(assessment)
        save_assessments(st.session_state.assessments)
        
        st.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!")
        st.balloons()
        
        # Clear current slide
        del st.session_state.current_slide
        if 'ai_analysis' in st.session_state:
            del st.session_state.ai_analysis

def show_summary():
    st.header("üìà ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô")
    
    if not st.session_state.assessments:
        st.warning("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô")
        return
    
    # Convert to DataFrame
    df = pd.DataFrame(st.session_state.assessments)
    
    # Overall statistics
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", len(df))
    with col2:
        passed = len(df[df['status'] == '‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå'])
        st.metric("‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå", passed, f"{passed/len(df)*100:.0f}%")
    with col3:
        avg_score = df['overall_score'].mean()
        st.metric("‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢", f"{avg_score:.1f}%")
    
    # Score distribution
    st.subheader("üìä ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô")
    fig = px.histogram(
        df, 
        x='overall_score', 
        nbins=20,
        title="‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°",
        labels={'overall_score': '‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏° (%)', 'count': '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô'}
    )
    fig.add_vline(x=70, line_dash="dash", line_color="red", annotation_text="‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏ú‡πà‡∏≤‡∏ô (70%)")
    st.plotly_chart(fig, use_container_width=True)
    
    # By course
    st.subheader("üìö ‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡∏≤‡∏°‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤")
    course_summary = df.groupby('course').agg({
        'overall_score': ['mean', 'count'],
        'status': lambda x: (x == '‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå').sum()
    }).round(1)
    
    course_summary.columns = ['‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô', '‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå']
    st.dataframe(course_summary, use_container_width=True)
    
    # PLO Analysis
    st.subheader("üéØ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡∏≤‡∏° PLO")
    plo_scores = {'PLO1': [], 'PLO2': [], 'PLO3': []}
    
    for assessment in st.session_state.assessments:
        for plo in plo_scores:
            if plo in assessment['scores']:
                plo_scores[plo].append(assessment['scores'][plo])
    
    plo_avg = {plo: sum(scores)/len(scores) if scores else 0 for plo, scores in plo_scores.items()}
    
    fig = px.bar(
        x=list(plo_avg.keys()),
        y=list(plo_avg.values()),
        title="‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡πÅ‡∏ï‡πà‡∏•‡∏∞ PLO",
        labels={'x': 'PLO', 'y': '‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ (%)'}
    )
    fig.add_hline(y=70, line_dash="dash", line_color="red")
    st.plotly_chart(fig, use_container_width=True)

def show_history():
    st.header("üìã ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô")
    
    if not st.session_state.assessments:
        st.warning("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô")
        return
    
    # Filter options
    col1, col2, col3 = st.columns(3)
    with col1:
        filter_course = st.selectbox(
            "‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤",
            ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] + list(set(a['course'] for a in st.session_state.assessments))
        )
    with col2:
        filter_status = st.selectbox(
            "‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞",
            ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå", "‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á"]
        )
    
    # Filter data
    filtered = st.session_state.assessments
    if filter_course != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
        filtered = [a for a in filtered if a['course'] == filter_course]
    if filter_status != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
        filtered = [a for a in filtered if a['status'] == filter_status]
    
    # Display table
    if filtered:
        df = pd.DataFrame(filtered)
        df = df[['date', 'slide_name', 'course', 'overall_score', 'status', 'ai_analyzed']]
        df.columns = ['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà', '‡∏ä‡∏∑‡πà‡∏≠ Slide', '‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤', '‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏° (%)', '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞', 'AI']
        df['AI'] = df['AI'].map({True: '‚úÖ', False: '‚ùå'})
        
        st.dataframe(
            df,
            use_container_width=True,
            hide_index=True,
            column_config={
                "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏° (%)": st.column_config.ProgressColumn(
                    "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏° (%)",
                    help="‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô",
                    format="%.1f%%",
                    min_value=0,
                    max_value=100,
                ),
            }
        )
        
        # Export button
        if st.button("üì• Export ‡πÄ‡∏õ‡πá‡∏ô CSV"):
            csv = df.to_csv(index=False, encoding='utf-8-sig')
            st.download_button(
                label="Download CSV",
                data=csv,
                file_name=f"assessment_history_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                mime="text/csv"
            )
    else:
        st.info("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")

if __name__ == "__main__":
    main()