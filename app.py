# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÉ‡∏ô class GoogleSheetsManager

def get_interpretation_history(self, spreadsheet, course_code=None, limit=20):
    """Get interpretation history from Google Sheets"""
    try:
        interpretation_sheet = spreadsheet.worksheet('Interpretation')
        all_records = interpretation_sheet.get_all_records()
        
        # Filter by course code if specified
        if course_code:
            filtered_records = [r for r in all_records if r.get('‡∏£‡∏´‡∏±‡∏™‡∏ß‡∏¥‡∏ä‡∏≤') == course_code]
        else:
            filtered_records = all_records
        
        # Sort by date descending
        sorted_records = sorted(
            filtered_records, 
            key=lambda x: x.get('‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà', ''), 
            reverse=True
        )[:limit]
        
        return sorted_records, f"‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏ú‡∏• {len(sorted_records)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"
        
    except Exception as e:
        return [], f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {str(e)}"

def get_interpretation_summary(self, spreadsheet, course_code=None):
    """Get summary of interpretations for analytics"""
    try:
        interpretation_sheet = spreadsheet.worksheet('Interpretation')
        all_records = interpretation_sheet.get_all_records()
        
        # Filter by course code if specified
        if course_code:
            records = [r for r in all_records if r.get('‡∏£‡∏´‡∏±‡∏™‡∏ß‡∏¥‡∏ä‡∏≤') == course_code]
        else:
            records = all_records
        
        if not records:
            return None, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏ú‡∏•"
        
        # Calculate summary statistics
        summary = {
            'total_interpretations': len(records),
            'result_distribution': {
                '‡∏î‡∏µ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°': 0,
                '‡∏î‡∏µ': 0,
                '‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á': 0,
                '‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏°‡∏≤‡∏Å': 0
            },
            'common_strengths': {},
            'common_weaknesses': {},
            'common_recommendations': {},
            'average_plo_coverage': 0,
            'cognitive_level_stats': {}
        }
        
        # Count result distribution
        for record in records:
            result = record.get('‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°', '')
            if result in summary['result_distribution']:
                summary['result_distribution'][result] += 1
        
        # Analyze common patterns
        for record in records:
            # Count strengths
            for i in range(1, 4):
                strength = record.get(f'‡∏à‡∏∏‡∏î‡πÄ‡∏î‡πà‡∏ô_{i}', '').strip()
                if strength:
                    summary['common_strengths'][strength] = summary['common_strengths'].get(strength, 0) + 1
            
            # Count weaknesses
            for i in range(1, 4):
                weakness = record.get(f'‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á_{i}', '').strip()
                if weakness:
                    summary['common_weaknesses'][weakness] = summary['common_weaknesses'].get(weakness, 0) + 1
            
            # Count recommendations
            for i in range(1, 4):
                rec = record.get(f'‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å_{i}', '').strip()
                if rec:
                    summary['common_recommendations'][rec] = summary['common_recommendations'].get(rec, 0) + 1
        
        # Sort by frequency
        summary['common_strengths'] = dict(sorted(summary['common_strengths'].items(), 
                                                  key=lambda x: x[1], reverse=True)[:5])
        summary['common_weaknesses'] = dict(sorted(summary['common_weaknesses'].items(), 
                                                   key=lambda x: x[1], reverse=True)[:5])
        summary['common_recommendations'] = dict(sorted(summary['common_recommendations'].items(), 
                                                       key=lambda x: x[1], reverse=True)[:5])
        
        return summary, "‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏ú‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
        
    except Exception as e:
        return None, f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}"

# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏ú‡∏•‡πÉ‡∏ô Streamlit

def show_interpretation_history():
    """Show interpretation history from Google Sheets"""
    st.subheader("üìä ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏ú‡∏•")
    
    if not hasattr(st.session_state, 'current_spreadsheet'):
        st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡∏∞‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheets ‡∏Å‡πà‡∏≠‡∏ô")
        return
    
    # Filter options
    col1, col2 = st.columns(2)
    
    with col1:
        filter_course = st.selectbox(
            "‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤",
            options=['‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'] + list(COURSE_DESCRIPTIONS.keys()),
            index=0,
            key="interpretation_filter_course"
        )
    
    with col2:
        if st.button("üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏ú‡∏•"):
            st.rerun()
    
    # Get interpretation history
    course_filter = None if filter_course == '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î' else filter_course
    
    try:
        history, message = st.session_state.sheets_manager.get_interpretation_history(
            st.session_state.current_spreadsheet,
            course_code=course_filter,
            limit=20
        )
        
        if history:
            st.success(message)
            
            # Display summary cards
            col1, col2, col3, col4 = st.columns(4)
            
            # Count results
            excellent = sum(1 for r in history if r.get('‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°') == '‡∏î‡∏µ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°')
            good = sum(1 for r in history if r.get('‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°') == '‡∏î‡∏µ')
            fair = sum(1 for r in history if r.get('‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°') == '‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á')
            poor = sum(1 for r in history if r.get('‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°') == '‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏°‡∏≤‡∏Å')
            
            with col1:
                st.metric("üåü ‡∏î‡∏µ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°", excellent)
            with col2:
                st.metric("‚úÖ ‡∏î‡∏µ", good)
            with col3:
                st.metric("‚ö†Ô∏è ‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á", fair)
            with col4:
                st.metric("‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á", poor)
            
            # Display interpretation details
            for record in history:
                with st.expander(f"{record.get('‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô')} - {record.get('‡∏£‡∏´‡∏±‡∏™‡∏ß‡∏¥‡∏ä‡∏≤')} ({record.get('‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà')})"):
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.write(f"**‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô:** {record.get('‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°')} ({record.get('‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô')})")
                        st.write(f"**CLO ‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î:** {record.get('CLO_‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î')}")
                        st.write(f"**CLO ‡∏ï‡πà‡∏≥‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î:** {record.get('CLO_‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î')}")
                        st.write(f"**PLO Coverage:** {record.get('PLO_Coverage')}")
                        
                        # Strengths
                        st.write("**‡∏à‡∏∏‡∏î‡πÄ‡∏î‡πà‡∏ô:**")
                        for i in range(1, 4):
                            strength = record.get(f'‡∏à‡∏∏‡∏î‡πÄ‡∏î‡πà‡∏ô_{i}', '').strip()
                            if strength:
                                st.write(f"‚Ä¢ {strength}")
                    
                    with col2:
                        st.write(f"**Year 1 YLOs:** {record.get('YLO_Year1_Count')}")
                        st.write(f"**Year 2 YLOs:** {record.get('YLO_Year2_Count')}")
                        st.write(f"**Cognitive Levels:** {record.get('Cognitive_Distribution')}")
                        
                        # Weaknesses
                        st.write("**‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á:**")
                        for i in range(1, 4):
                            weakness = record.get(f'‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á_{i}', '').strip()
                            if weakness:
                                st.write(f"‚Ä¢ {weakness}")
                    
                    # Recommendations
                    st.write("**‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å:**")
                    for i in range(1, 4):
                        rec = record.get(f'‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å_{i}', '').strip()
                        if rec:
                            st.write(f"{i}. {rec}")
        else:
            st.info(message)
            
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {str(e)}")

def show_interpretation_analytics():
    """Show analytics of interpretation data"""
    st.subheader("üìà ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏ú‡∏•")
    
    if not hasattr(st.session_state, 'current_spreadsheet'):
        st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡∏∞‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheets ‡∏Å‡πà‡∏≠‡∏ô")
        return
    
    # Course selection
    selected_course = st.selectbox(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå",
        options=['‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'] + list(COURSE_DESCRIPTIONS.keys()),
        format_func=lambda x: x if x == '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î' else f"{x} - {COURSE_DESCRIPTIONS[x]['name']}",
        key="interpretation_analytics_course"
    )
    
    course_filter = None if selected_course == '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î' else selected_course
    
    try:
        summary, message = st.session_state.sheets_manager.get_interpretation_summary(
            st.session_state.current_spreadsheet,
            course_code=course_filter
        )
        
        if summary:
            st.success(message)
            
            # Result distribution pie chart
            st.markdown("### üìä ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô")
            
            # Create pie chart
            labels = list(summary['result_distribution'].keys())
            values = list(summary['result_distribution'].values())
            colors = ['#00CC00', '#66B2FF', '#FFB366', '#FF6666']
            
            fig = go.Figure(data=[go.Pie(
                labels=labels, 
                values=values,
                hole=.3,
                marker_colors=colors
            )])
            
            fig.update_layout(
                title="‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô",
                height=400
            )
            
            st.plotly_chart(fig, use_container_width=True)
            
            # Common patterns
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.markdown("### üí™ ‡∏à‡∏∏‡∏î‡πÄ‡∏î‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢")
                for strength, count in summary['common_strengths'].items():
                    st.write(f"‚Ä¢ {strength} ({count} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á)")
            
            with col2:
                st.markdown("### ‚ö†Ô∏è ‡∏à‡∏∏‡∏î‡∏≠‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢")
                for weakness, count in summary['common_weaknesses'].items():
                    st.write(f"‚Ä¢ {weakness} ({count} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á)")
            
            with col3:
                st.markdown("### üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢")
                for rec, count in summary['common_recommendations'].items():
                    st.write(f"‚Ä¢ {rec} ({count} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á)")
            
            # Summary statistics
            st.markdown("### üìà ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏£‡∏∏‡∏õ")
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", summary['total_interpretations'])
            
            with col2:
                excellent_percent = (summary['result_distribution']['‡∏î‡∏µ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°'] / 
                                   summary['total_interpretations'] * 100) if summary['total_interpretations'] > 0 else 0
                st.metric("% ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏ú‡∏•‡∏î‡∏µ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°", f"{excellent_percent:.1f}%")
            
            with col3:
                need_improve = (summary['result_distribution']['‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á'] + 
                              summary['result_distribution']['‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏°‡∏≤‡∏Å'])
                improve_percent = (need_improve / summary['total_interpretations'] * 100) if summary['total_interpretations'] > 0 else 0
                st.metric("% ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á", f"{improve_percent:.1f}%")
            
        else:
            st.warning(message)
            
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
